/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package FizzBuzzTree;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class App {
    public static void main(String[] args) {
        BinarySearchTree<String> tree = generateRandomBST();
        System.out.println("Original Tree:");
        BTreePrinter.printNode(tree.getRoot());

        fizzBuzzTree(tree.getRoot());
        System.out.println("\nFizz Buzz Tree:");
        BTreePrinter.printNode(tree.getRoot());
    }

    public static void fizzBuzzTree(TreeNode<String> node) {
        if (node == null)
            return;
        if (Integer.parseInt(node.getValue()) % 15 == 0) {
            node.setValue("FizzBuzz");
        } else if (Integer.parseInt(node.getValue()) % 5 == 0) {
            node.setValue("Buzz");
        } else if (Integer.parseInt(node.getValue()) % 3 == 0) {
            node.setValue("Fizz");
        }
        fizzBuzzTree(node.getLeft());
        fizzBuzzTree(node.getRight());
    }

    public static BinarySearchTree<String> generateRandomBST() {
        BinarySearchTree<String> tree = new BinarySearchTree<>();
        for (int i = 0; i < 7; i++) {
            tree.add(Integer.toString((int) (Math.random() * 30) + 1));
        }
        return tree;
    }
}

/*
 * TreeNode class and BinarySearchTree class taken from my Tree directory
 */
class TreeNode<T> {
    private T value;
    private TreeNode<T> left;
    private TreeNode<T> right;

    public TreeNode(T value) {
        this.setValue(value);
        this.setLeft(null);
        this.setRight(null);
    }

    public T getValue() {
        return value;
    }

    public void setValue(T value) {
        this.value = value;
    }

    public TreeNode<T> getLeft() {
        return left;
    }

    public void setLeft(TreeNode<T> left) {
        this.left = left;
    }

    public TreeNode<T> getRight() {
        return right;
    }

    public void setRight(TreeNode<T> right) {
        this.right = right;
    }
}

class BinarySearchTree<T extends Comparable<T>> {
    TreeNode<T> root;

    public BinarySearchTree() {
        this.setRoot(null);
    }

    public void add(T value) {
        if (this.contains(value))
            return;

        TreeNode<T> newTreeNode = new TreeNode<>(value);
        TreeNode<T> root = this.getRoot();

        if (root == null)
            this.setRoot(newTreeNode);
        else
            this.addHelper(root, newTreeNode);
    }

    private void addHelper(TreeNode<T> treeNode, TreeNode<T> newTreeNode) {
        if (newTreeNode.getValue().compareTo(treeNode.getValue()) < 0) {
            if (treeNode.getLeft() == null)
                treeNode.setLeft(newTreeNode);
            else
                this.addHelper(treeNode.getLeft(), newTreeNode);
        } else {
            if (treeNode.getRight() == null)
                treeNode.setRight(newTreeNode);
            else
                this.addHelper(treeNode.getRight(), newTreeNode);
        }
    }

    public boolean contains(T value) {
        return this.containsHelper(this.getRoot(), value);
    }

    private boolean containsHelper(TreeNode<T> treeNode, T value) {
        if (treeNode == null)
            return false;

        if (treeNode.getValue().equals(value))
            return true;

        return (value.compareTo(treeNode.getValue()) < 0) ?
                this.containsHelper(treeNode.getLeft(), value) :
                this.containsHelper(treeNode.getRight(), value);
    }

    /*
     * Getters and Setters Section
     */

    public TreeNode<T> getRoot() {
        return this.root;
    }

    public void setRoot(TreeNode<T> treeNode) {
        this.root = treeNode;
    }

}

//
// Java Binary Tree Pretty Printer taken from
// https://stackoverflow.com/questions/4965335/how-to-print-binary-tree-diagram/29704252
//
class BTreePrinter {

    public static <T extends Comparable<?>> void printNode(TreeNode<T> root) {
        int maxLevel = BTreePrinter.maxLevel(root);

        printNodeInternal(Collections.singletonList(root), 1, maxLevel);
    }

    private static <T extends Comparable<?>> void printNodeInternal(List<TreeNode<T>> nodes, int level, int maxLevel) {
        if (nodes.isEmpty() || BTreePrinter.isAllElementsNull(nodes))
            return;

        int floor = maxLevel - level;
        int endgeLines = (int) Math.pow(2, (Math.max(floor - 1, 0)));
        int firstSpaces = (int) Math.pow(2, (floor)) - 1;
        int betweenSpaces = (int) Math.pow(2, (floor + 1)) - 1;

        BTreePrinter.printWhitespaces(firstSpaces);

        List<TreeNode<T>> newNodes = new ArrayList<TreeNode<T>>();
        for (TreeNode<T> node : nodes) {
            if (node != null) {
                System.out.print(node.getValue());
                newNodes.add(node.getLeft());
                newNodes.add(node.getRight());
            } else {
                newNodes.add(null);
                newNodes.add(null);
                System.out.print(" ");
            }

            BTreePrinter.printWhitespaces(betweenSpaces);
        }
        System.out.println("");

        for (int i = 1; i <= endgeLines; i++) {
            for (int j = 0; j < nodes.size(); j++) {
                BTreePrinter.printWhitespaces(firstSpaces - i);
                if (nodes.get(j) == null) {
                    BTreePrinter.printWhitespaces(endgeLines + endgeLines + i + 1);
                    continue;
                }

                if (nodes.get(j).getLeft() != null)
                    System.out.print("/");
                else
                    BTreePrinter.printWhitespaces(1);

                BTreePrinter.printWhitespaces(i + i - 1);

                if (nodes.get(j).getRight() != null)
                    System.out.print("\\");
                else
                    BTreePrinter.printWhitespaces(1);

                BTreePrinter.printWhitespaces(endgeLines + endgeLines - i);
            }

            System.out.println("");
        }

        printNodeInternal(newNodes, level + 1, maxLevel);
    }

    private static void printWhitespaces(int count) {
        for (int i = 0; i < count; i++)
            System.out.print(" ");
    }

    private static <T extends Comparable<?>> int maxLevel(TreeNode<T> node) {
        if (node == null)
            return 0;

        return Math.max(BTreePrinter.maxLevel(node.getLeft()), BTreePrinter.maxLevel(node.getRight())) + 1;
    }

    private static <T> boolean isAllElementsNull(List<T> list) {
        for (Object object : list) {
            if (object != null)
                return false;
        }

        return true;
    }

}