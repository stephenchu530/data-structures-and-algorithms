/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package GetEdge;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

public class GetEdge<T> {

    private ArrayList<GraphNode<T>> nodes;

    public GetEdge() {
        this.setNodes(new ArrayList<GraphNode<T>>());
    }

    public String[] getEdge(GetEdge<T> graph, T[] arr) {
        Integer sumOfWeights = 0;
        GraphNode<T> tmpNodeSrc;
        GraphNode<T> tmpNodeDst;

        if (arr.length == 0) {
            return new String[]{String.valueOf(false), String.valueOf(0)};
        }

        for (int i = 0; i < arr.length - 1; i++) {
            tmpNodeSrc = this.findNode(graph, arr[i]);
            tmpNodeDst = this.findNode(graph, arr[i + 1]);
            if (tmpNodeSrc.getNeighbors().contains(tmpNodeDst)) {
                sumOfWeights += tmpNodeSrc.getWeights().get(tmpNodeDst);
            } else {
                return new String[]{String.valueOf(false), String.valueOf(0)};
            }
        }
        return new String[]{String.valueOf(true), String.valueOf(sumOfWeights)};
    }

    public GraphNode<T> findNode(GetEdge<T> graph, T value) {
        ArrayList<GraphNode<T>> listOfNodes = graph.getNodes();
        for (GraphNode<T> node: listOfNodes) {
            if (node.getValue().equals(value))
                return node;
        }
        return null;
    }

    public ArrayList<T> breadthFirst(GraphNode<T> node) {
        ArrayList<T> results = new ArrayList<>();
        HashSet<GraphNode<T>> visited = new HashSet<>();
        ArrayList<GraphNode<T>> queue = new ArrayList<>();
        GraphNode<T> tmpNode;


        if (this.getNodes().contains(node)) {
            visited.add(node);
            queue.add(node);
            while (!queue.isEmpty()) {
                tmpNode = queue.remove(0);
                for (GraphNode<T> seeNode: tmpNode.getNeighbors()) {
                    if (visited.add(seeNode)) {
                        queue.add(seeNode);
                    }
                }
                results.add(tmpNode.getValue());
            }
        }

        return results;
    }

    public GraphNode addNode(T value) {
        GraphNode<T> newNode = new GraphNode<T>(value);
        ArrayList<GraphNode<T>> nodes = this.getNodes();
        nodes.add(newNode);
        this.setNodes(nodes);
        return newNode;
    }

    public void addEdge(GraphNode<T> nodeA, GraphNode<T> nodeB, int weight) {
        if (this.getNodes().contains(nodeA) && this.getNodes().contains(nodeB)) {
            nodeA.addNeighbor(nodeB, weight);
            nodeB.addNeighbor(nodeA, weight);
        }
    }

    public ArrayList<GraphNode<T>> getNeighbors(GraphNode<T> node) {
        return node.getNeighbors();
    }

    public int size() {
        return this.getNodes().size();
    }

    public ArrayList<GraphNode<T>> getNodes() {
        return new ArrayList<GraphNode<T>>(this.nodes);
    }

    public void setNodes(ArrayList<GraphNode<T>> nodes) {
        this.nodes = new ArrayList<GraphNode<T>>(nodes);
    }
}

class GraphNode<T> {

    private T value;
    private ArrayList<GraphNode<T>> neighbors;
    private HashMap<GraphNode<T>, Integer> weights;

    public GraphNode(T value) {
        this.setValue(value);
        this.setNeighbors(new ArrayList<>());
        this.setWeights(new HashMap<>());
    }

    public void addNeighbor(GraphNode<T> node, Integer weight) {
        ArrayList<GraphNode<T>> tmpN = this.getNeighbors();
        HashMap<GraphNode<T>, Integer> tmpW = this.getWeights();
        tmpN.add(node);
        tmpW.put(node, weight);
        this.setNeighbors(tmpN);
        this.setWeights(tmpW);
    }

    public T getValue() {
        return this.value;
    }

    public void setValue(T value) {
        this.value = value;
    }

    public void setNeighbors(ArrayList<GraphNode<T>> neighbors) {
        this.neighbors = new ArrayList<>(neighbors);
    }

    public ArrayList<GraphNode<T>> getNeighbors() {
        return new ArrayList<>(this.neighbors);
    }

    public void setWeights(HashMap<GraphNode<T>, Integer> weights) {
        this.weights = new HashMap<>(weights);
    }

    public HashMap<GraphNode<T>, Integer> getWeights() {
        return new HashMap<>(this.weights);
    }
}